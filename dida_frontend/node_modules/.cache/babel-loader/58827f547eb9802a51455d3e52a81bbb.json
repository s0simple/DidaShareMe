{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Subscriber_1 = require(\"../Subscriber\");\nfunction map(project, thisArg) {\n  return function mapOperation(source) {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\nexports.map = map;\nvar MapOperator = function () {\n  function MapOperator(project, thisArg) {\n    this.project = project;\n    this.thisArg = thisArg;\n  }\n  MapOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  };\n  return MapOperator;\n}();\nexports.MapOperator = MapOperator;\nvar MapSubscriber = function (_super) {\n  __extends(MapSubscriber, _super);\n  function MapSubscriber(destination, project, thisArg) {\n    var _this = _super.call(this, destination) || this;\n    _this.project = project;\n    _this.count = 0;\n    _this.thisArg = thisArg || _this;\n    return _this;\n  }\n  MapSubscriber.prototype._next = function (value) {\n    var result;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  };\n  return MapSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;AA2CA,SAAgBA,GAAG,CAAOC,OAAuC,EAAEC,OAAa;EAC9E,OAAO,SAASC,YAAY,CAACC,MAAqB;IAChD,IAAI,OAAOH,OAAO,KAAK,UAAU,EAAE;MACjC,MAAM,IAAII,SAAS,CAAC,4DAA4D,CAAC;;IAEnF,OAAOD,MAAM,CAACE,IAAI,CAAC,IAAIC,WAAW,CAACN,OAAO,EAAEC,OAAO,CAAC,CAAC;EACvD,CAAC;AACH;AAPAM;AASA;EACE,qBAAoBP,OAAuC,EAAUC,OAAY;IAA7D,YAAO,GAAPD,OAAO;IAA0C,YAAO,GAAPC,OAAO;EAC5E;EAEAK,0BAAI,GAAJ,UAAKE,UAAyB,EAAEL,MAAW;IACzC,OAAOA,MAAM,CAACM,SAAS,CAAC,IAAIC,aAAa,CAACF,UAAU,EAAE,IAAI,CAACR,OAAO,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC;EACpF,CAAC;EACH,kBAAC;AAAD,CAAC,EAPD;AAAaM;AAcb;EAAkCI;EAIhC,uBAAYC,WAA0B,EAClBZ,OAAuC,EAC/CC,OAAY;IAFxB,YAGEY,kBAAMD,WAAW,CAAC;IAFAE,aAAO,GAAPd,OAAO;IAJ3Bc,WAAK,GAAW,CAAC;IAOfA,KAAI,CAACb,OAAO,GAAGA,OAAO,IAAIa,KAAI;;EAChC;EAIUJ,6BAAK,GAAf,UAAgBK,KAAQ;IACtB,IAAIC,MAAS;IACb,IAAI;MACFA,MAAM,GAAG,IAAI,CAAChB,OAAO,CAACiB,IAAI,CAAC,IAAI,CAAChB,OAAO,EAAEc,KAAK,EAAE,IAAI,CAACG,KAAK,EAAE,CAAC;KAC9D,CAAC,OAAOC,GAAG,EAAE;MACZ,IAAI,CAACP,WAAW,CAACQ,KAAK,CAACD,GAAG,CAAC;MAC3B;;IAEF,IAAI,CAACP,WAAW,CAACS,IAAI,CAACL,MAAM,CAAC;EAC/B,CAAC;EACH,oBAAC;AAAD,CAAC,CAvBiCM,uBAAU","names":["map","project","thisArg","mapOperation","source","TypeError","lift","MapOperator","exports","subscriber","subscribe","MapSubscriber","__extends","destination","_super","_this","value","result","call","count","err","error","next","Subscriber_1"],"sources":["C:\\Users\\Sampah\\Desktop\\project\\try\\DIDASHARE\\dida_frontend\\node_modules\\rxjs\\src\\internal\\operators\\map.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: R;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}