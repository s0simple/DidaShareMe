{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable no-empty-function, no-process-env */\nvar getIt = require('get-it');\nvar assign = require('object-assign');\nvar observable = require('get-it/lib/middleware/observable');\nvar jsonRequest = require('get-it/lib/middleware/jsonRequest');\nvar jsonResponse = require('get-it/lib/middleware/jsonResponse');\nvar progress = require('get-it/lib/middleware/progress');\nvar _require = require('../util/observable'),\n  Observable = _require.Observable;\nvar _require2 = require('./errors'),\n  ClientError = _require2.ClientError,\n  ServerError = _require2.ServerError;\nvar httpError = {\n  onResponse: function onResponse(res) {\n    if (res.statusCode >= 500) {\n      throw new ServerError(res);\n    } else if (res.statusCode >= 400) {\n      throw new ClientError(res);\n    }\n    return res;\n  }\n};\nvar printWarnings = {\n  onResponse: function onResponse(res) {\n    var warn = res.headers['x-sanity-warning'];\n    var warnings = Array.isArray(warn) ? warn : [warn];\n    warnings.filter(Boolean).forEach(function (msg) {\n      return console.warn(msg);\n    }); // eslint-disable-line no-console\n\n    return res;\n  }\n}; // Environment-specific middleware.\n\nvar envSpecific = require('./nodeMiddleware');\nvar middleware = envSpecific.concat([printWarnings, jsonRequest(), jsonResponse(), progress(), httpError, observable({\n  implementation: Observable\n})]);\nvar request = getIt(middleware);\nfunction httpRequest(options) {\n  var requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n  return requester(assign({\n    maxRedirects: 0\n  }, options));\n}\nhttpRequest.defaultRequester = request;\nhttpRequest.ClientError = ClientError;\nhttpRequest.ServerError = ServerError;\nmodule.exports = httpRequest;","map":{"version":3,"names":["getIt","require","assign","observable","jsonRequest","jsonResponse","progress","_require","Observable","_require2","ClientError","ServerError","httpError","onResponse","res","statusCode","printWarnings","warn","headers","warnings","Array","isArray","filter","Boolean","forEach","msg","console","envSpecific","middleware","concat","implementation","request","httpRequest","options","requester","arguments","length","undefined","maxRedirects","defaultRequester","module","exports"],"sources":["C:/Users/Sampah/Desktop/project/try/DIDASHARE/dida_frontend/node_modules/@sanity/client/lib/http/request.js"],"sourcesContent":["\"use strict\";\n\n/* eslint-disable no-empty-function, no-process-env */\nvar getIt = require('get-it');\n\nvar assign = require('object-assign');\n\nvar observable = require('get-it/lib/middleware/observable');\n\nvar jsonRequest = require('get-it/lib/middleware/jsonRequest');\n\nvar jsonResponse = require('get-it/lib/middleware/jsonResponse');\n\nvar progress = require('get-it/lib/middleware/progress');\n\nvar _require = require('../util/observable'),\n    Observable = _require.Observable;\n\nvar _require2 = require('./errors'),\n    ClientError = _require2.ClientError,\n    ServerError = _require2.ServerError;\n\nvar httpError = {\n  onResponse: function onResponse(res) {\n    if (res.statusCode >= 500) {\n      throw new ServerError(res);\n    } else if (res.statusCode >= 400) {\n      throw new ClientError(res);\n    }\n\n    return res;\n  }\n};\nvar printWarnings = {\n  onResponse: function onResponse(res) {\n    var warn = res.headers['x-sanity-warning'];\n    var warnings = Array.isArray(warn) ? warn : [warn];\n    warnings.filter(Boolean).forEach(function (msg) {\n      return console.warn(msg);\n    }); // eslint-disable-line no-console\n\n    return res;\n  }\n}; // Environment-specific middleware.\n\nvar envSpecific = require('./nodeMiddleware');\n\nvar middleware = envSpecific.concat([printWarnings, jsonRequest(), jsonResponse(), progress(), httpError, observable({\n  implementation: Observable\n})]);\nvar request = getIt(middleware);\n\nfunction httpRequest(options) {\n  var requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n  return requester(assign({\n    maxRedirects: 0\n  }, options));\n}\n\nhttpRequest.defaultRequester = request;\nhttpRequest.ClientError = ClientError;\nhttpRequest.ServerError = ServerError;\nmodule.exports = httpRequest;"],"mappings":"AAAA,YAAY;;AAEZ;AACA,IAAIA,KAAK,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE7B,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAe,CAAC;AAErC,IAAIE,UAAU,GAAGF,OAAO,CAAC,kCAAkC,CAAC;AAE5D,IAAIG,WAAW,GAAGH,OAAO,CAAC,mCAAmC,CAAC;AAE9D,IAAII,YAAY,GAAGJ,OAAO,CAAC,oCAAoC,CAAC;AAEhE,IAAIK,QAAQ,GAAGL,OAAO,CAAC,gCAAgC,CAAC;AAExD,IAAIM,QAAQ,GAAGN,OAAO,CAAC,oBAAoB,CAAC;EACxCO,UAAU,GAAGD,QAAQ,CAACC,UAAU;AAEpC,IAAIC,SAAS,GAAGR,OAAO,CAAC,UAAU,CAAC;EAC/BS,WAAW,GAAGD,SAAS,CAACC,WAAW;EACnCC,WAAW,GAAGF,SAAS,CAACE,WAAW;AAEvC,IAAIC,SAAS,GAAG;EACdC,UAAU,EAAE,SAASA,UAAU,CAACC,GAAG,EAAE;IACnC,IAAIA,GAAG,CAACC,UAAU,IAAI,GAAG,EAAE;MACzB,MAAM,IAAIJ,WAAW,CAACG,GAAG,CAAC;IAC5B,CAAC,MAAM,IAAIA,GAAG,CAACC,UAAU,IAAI,GAAG,EAAE;MAChC,MAAM,IAAIL,WAAW,CAACI,GAAG,CAAC;IAC5B;IAEA,OAAOA,GAAG;EACZ;AACF,CAAC;AACD,IAAIE,aAAa,GAAG;EAClBH,UAAU,EAAE,SAASA,UAAU,CAACC,GAAG,EAAE;IACnC,IAAIG,IAAI,GAAGH,GAAG,CAACI,OAAO,CAAC,kBAAkB,CAAC;IAC1C,IAAIC,QAAQ,GAAGC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;IAClDE,QAAQ,CAACG,MAAM,CAACC,OAAO,CAAC,CAACC,OAAO,CAAC,UAAUC,GAAG,EAAE;MAC9C,OAAOC,OAAO,CAACT,IAAI,CAACQ,GAAG,CAAC;IAC1B,CAAC,CAAC,CAAC,CAAC;;IAEJ,OAAOX,GAAG;EACZ;AACF,CAAC,CAAC,CAAC;;AAEH,IAAIa,WAAW,GAAG1B,OAAO,CAAC,kBAAkB,CAAC;AAE7C,IAAI2B,UAAU,GAAGD,WAAW,CAACE,MAAM,CAAC,CAACb,aAAa,EAAEZ,WAAW,EAAE,EAAEC,YAAY,EAAE,EAAEC,QAAQ,EAAE,EAAEM,SAAS,EAAET,UAAU,CAAC;EACnH2B,cAAc,EAAEtB;AAClB,CAAC,CAAC,CAAC,CAAC;AACJ,IAAIuB,OAAO,GAAG/B,KAAK,CAAC4B,UAAU,CAAC;AAE/B,SAASI,WAAW,CAACC,OAAO,EAAE;EAC5B,IAAIC,SAAS,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAGJ,OAAO;EAC3F,OAAOG,SAAS,CAAChC,MAAM,CAAC;IACtBoC,YAAY,EAAE;EAChB,CAAC,EAAEL,OAAO,CAAC,CAAC;AACd;AAEAD,WAAW,CAACO,gBAAgB,GAAGR,OAAO;AACtCC,WAAW,CAACtB,WAAW,GAAGA,WAAW;AACrCsB,WAAW,CAACrB,WAAW,GAAGA,WAAW;AACrC6B,MAAM,CAACC,OAAO,GAAGT,WAAW"},"metadata":{},"sourceType":"script"}