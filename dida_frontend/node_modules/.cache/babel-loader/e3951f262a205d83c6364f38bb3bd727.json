{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Subscriber_1 = require(\"../Subscriber\");\nfunction canReportError(observer) {\n  while (observer) {\n    var _a = observer,\n      closed_1 = _a.closed,\n      destination = _a.destination,\n      isStopped = _a.isStopped;\n    if (closed_1 || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber_1.Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\nexports.canReportError = canReportError;","map":{"version":3,"mappings":";;;;;AAAA;AASA,SAAgBA,cAAc,CAACC,QAAwC;EACrE,OAAOA,QAAQ,EAAE;IACT,iBAAoD;MAAlDC,oBAAM;MAAEC,4BAAW;MAAEC,wBAAS;IACtC,IAAIF,QAAM,IAAIE,SAAS,EAAE;MACvB,OAAO,KAAK;KACb,MAAM,IAAID,WAAW,IAAIA,WAAW,YAAYE,uBAAU,EAAE;MAC3DJ,QAAQ,GAAGE,WAAW;KACvB,MAAM;MACLF,QAAQ,GAAG,IAAI;;;EAGnB,OAAO,IAAI;AACb;AAZAK","names":["canReportError","observer","closed_1","destination","isStopped","Subscriber_1","exports"],"sources":["C:\\Users\\Sampah\\Desktop\\project\\try\\DIDASHARE\\dida_frontend\\node_modules\\rxjs\\src\\internal\\util\\canReportError.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}