{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Subscriber_1 = require(\"../Subscriber\");\nfunction filter(predicate, thisArg) {\n  return function filterOperatorFunction(source) {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\nexports.filter = filter;\nvar FilterOperator = function () {\n  function FilterOperator(predicate, thisArg) {\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n  }\n  FilterOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  };\n  return FilterOperator;\n}();\nvar FilterSubscriber = function (_super) {\n  __extends(FilterSubscriber, _super);\n  function FilterSubscriber(destination, predicate, thisArg) {\n    var _this = _super.call(this, destination) || this;\n    _this.predicate = predicate;\n    _this.thisArg = thisArg;\n    _this.count = 0;\n    return _this;\n  }\n  FilterSubscriber.prototype._next = function (value) {\n    var result;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  };\n  return FilterSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA;AAwDA,SAAgBA,MAAM,CAAIC,SAA+C,EAC/CC,OAAa;EACrC,OAAO,SAASC,sBAAsB,CAACC,MAAqB;IAC1D,OAAOA,MAAM,CAACC,IAAI,CAAC,IAAIC,cAAc,CAACL,SAAS,EAAEC,OAAO,CAAC,CAAC;EAC5D,CAAC;AACH;AALAK;AAOA;EACE,wBAAoBN,SAA+C,EAC/CC,OAAa;IADb,cAAS,GAATD,SAAS;IACT,YAAO,GAAPC,OAAO;EAC3B;EAEAI,6BAAI,GAAJ,UAAKE,UAAyB,EAAEJ,MAAW;IACzC,OAAOA,MAAM,CAACK,SAAS,CAAC,IAAIC,gBAAgB,CAACF,UAAU,EAAE,IAAI,CAACP,SAAS,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC;EACzF,CAAC;EACH,qBAAC;AAAD,CAAC,EARD;AAeA;EAAkCS;EAIhC,0BAAYC,WAA0B,EAClBX,SAA+C,EAC/CC,OAAY;IAFhC,YAGEW,kBAAMD,WAAW,CAAC;IAFAE,eAAS,GAATb,SAAS;IACTa,aAAO,GAAPZ,OAAO;IAJ3BY,WAAK,GAAW,CAAC;;EAMjB;EAIUJ,gCAAK,GAAf,UAAgBK,KAAQ;IACtB,IAAIC,MAAW;IACf,IAAI;MACFA,MAAM,GAAG,IAAI,CAACf,SAAS,CAACgB,IAAI,CAAC,IAAI,CAACf,OAAO,EAAEa,KAAK,EAAE,IAAI,CAACG,KAAK,EAAE,CAAC;KAChE,CAAC,OAAOC,GAAG,EAAE;MACZ,IAAI,CAACP,WAAW,CAACQ,KAAK,CAACD,GAAG,CAAC;MAC3B;;IAEF,IAAIH,MAAM,EAAE;MACV,IAAI,CAACJ,WAAW,CAACS,IAAI,CAACN,KAAK,CAAC;;EAEhC,CAAC;EACH,uBAAC;AAAD,CAAC,CAxBiCO,uBAAU","names":["filter","predicate","thisArg","filterOperatorFunction","source","lift","FilterOperator","exports","subscriber","subscribe","FilterSubscriber","__extends","destination","_super","_this","value","result","call","count","err","error","next","Subscriber_1"],"sources":["C:\\Users\\Sampah\\Desktop\\project\\try\\DIDASHARE\\dida_frontend\\node_modules\\rxjs\\src\\internal\\operators\\filter.ts"],"sourcesContent":["import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { filter } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}