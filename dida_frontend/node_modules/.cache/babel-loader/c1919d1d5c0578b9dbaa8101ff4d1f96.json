{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.SanityImageUrlBuilder = factory();\n})(this, function () {\n  var example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg';\n  function parseAssetId(ref) {\n    var ref$1 = ref.split('-');\n    var id = ref$1[1];\n    var dimensionString = ref$1[2];\n    var format = ref$1[3];\n    if (!id || !dimensionString || !format) {\n      throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + \"\\\".\");\n    }\n    var ref$2 = dimensionString.split('x');\n    var imgWidthStr = ref$2[0];\n    var imgHeightStr = ref$2[1];\n    var width = +imgWidthStr;\n    var height = +imgHeightStr;\n    var isValidAssetId = isFinite(width) && isFinite(height);\n    if (!isValidAssetId) {\n      throw new Error(\"Malformed asset _ref '\" + ref + \"'. Expected an id like \\\"\" + example + \"\\\".\");\n    }\n    return {\n      id: id,\n      width: width,\n      height: height,\n      format: format\n    };\n  }\n  var isRef = function (src) {\n    var source = src;\n    return source ? typeof source._ref === 'string' : false;\n  };\n  var isAsset = function (src) {\n    var source = src;\n    return source ? typeof source._id === 'string' : false;\n  };\n  var isAssetStub = function (src) {\n    var source = src;\n    return source && source.asset ? typeof source.asset.url === 'string' : false;\n  }; // Convert an asset-id, asset or image to an image record suitable for processing\n  // eslint-disable-next-line complexity\n\n  function parseSource(source) {\n    if (!source) {\n      return null;\n    }\n    var image;\n    if (typeof source === 'string' && isUrl(source)) {\n      // Someone passed an existing image url?\n      image = {\n        asset: {\n          _ref: urlToId(source)\n        }\n      };\n    } else if (typeof source === 'string') {\n      // Just an asset id\n      image = {\n        asset: {\n          _ref: source\n        }\n      };\n    } else if (isRef(source)) {\n      // We just got passed an asset directly\n      image = {\n        asset: source\n      };\n    } else if (isAsset(source)) {\n      // If we were passed an image asset document\n      image = {\n        asset: {\n          _ref: source._id || ''\n        }\n      };\n    } else if (isAssetStub(source)) {\n      // If we were passed a partial asset (`url`, but no `_id`)\n      image = {\n        asset: {\n          _ref: urlToId(source.asset.url)\n        }\n      };\n    } else if (typeof source.asset === 'object') {\n      // Probably an actual image with materialized asset\n      image = source;\n    } else {\n      // We got something that does not look like an image, or it is an image\n      // that currently isn't sporting an asset.\n      return null;\n    }\n    var img = source;\n    if (img.crop) {\n      image.crop = img.crop;\n    }\n    if (img.hotspot) {\n      image.hotspot = img.hotspot;\n    }\n    return applyDefaults(image);\n  }\n  function isUrl(url) {\n    return /^https?:\\/\\//.test(\"\" + url);\n  }\n  function urlToId(url) {\n    var parts = url.split('/').slice(-1);\n    return (\"image-\" + parts[0]).replace(/\\.([a-z]+)$/, '-$1');\n  } // Mock crop and hotspot if image lacks it\n\n  function applyDefaults(image) {\n    if (image.crop && image.hotspot) {\n      return image;\n    } // We need to pad in default values for crop or hotspot\n\n    var result = Object.assign({}, image);\n    if (!result.crop) {\n      result.crop = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0\n      };\n    }\n    if (!result.hotspot) {\n      result.hotspot = {\n        x: 0.5,\n        y: 0.5,\n        height: 1.0,\n        width: 1.0\n      };\n    }\n    return result;\n  }\n  var SPEC_NAME_TO_URL_NAME_MAPPINGS = [['width', 'w'], ['height', 'h'], ['format', 'fm'], ['download', 'dl'], ['blur', 'blur'], ['sharpen', 'sharp'], ['invert', 'invert'], ['orientation', 'or'], ['minHeight', 'min-h'], ['maxHeight', 'max-h'], ['minWidth', 'min-w'], ['maxWidth', 'max-w'], ['quality', 'q'], ['fit', 'fit'], ['crop', 'crop'], ['saturation', 'sat'], ['auto', 'auto'], ['dpr', 'dpr'], ['pad', 'pad']];\n  function urlForImage(options) {\n    var spec = Object.assign({}, options || {});\n    var source = spec.source;\n    delete spec.source;\n    var image = parseSource(source);\n    if (!image) {\n      throw new Error(\"Unable to resolve image URL from source (\" + JSON.stringify(source) + \")\");\n    }\n    var id = image.asset._ref || image.asset._id || '';\n    var asset = parseAssetId(id); // Compute crop rect in terms of pixel coordinates in the raw source image\n\n    var cropLeft = Math.round(image.crop.left * asset.width);\n    var cropTop = Math.round(image.crop.top * asset.height);\n    var crop = {\n      left: cropLeft,\n      top: cropTop,\n      width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n      height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)\n    }; // Compute hot spot rect in terms of pixel coordinates\n\n    var hotSpotVerticalRadius = image.hotspot.height * asset.height / 2;\n    var hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2;\n    var hotSpotCenterX = image.hotspot.x * asset.width;\n    var hotSpotCenterY = image.hotspot.y * asset.height;\n    var hotspot = {\n      left: hotSpotCenterX - hotSpotHorizontalRadius,\n      top: hotSpotCenterY - hotSpotVerticalRadius,\n      right: hotSpotCenterX + hotSpotHorizontalRadius,\n      bottom: hotSpotCenterY + hotSpotVerticalRadius\n    }; // If irrelevant, or if we are requested to: don't perform crop/fit based on\n    // the crop/hotspot.\n\n    if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n      spec = Object.assign({}, spec, fit({\n        crop: crop,\n        hotspot: hotspot\n      }, spec));\n    }\n    return specToImageUrl(Object.assign({}, spec, {\n      asset: asset\n    }));\n  } // eslint-disable-next-line complexity\n\n  function specToImageUrl(spec) {\n    var cdnUrl = spec.baseUrl || 'https://cdn.sanity.io';\n    var filename = spec.asset.id + \"-\" + spec.asset.width + \"x\" + spec.asset.height + \".\" + spec.asset.format;\n    var baseUrl = cdnUrl + \"/images/\" + spec.projectId + \"/\" + spec.dataset + \"/\" + filename;\n    var params = [];\n    if (spec.rect) {\n      // Only bother url with a crop if it actually crops anything\n      var ref = spec.rect;\n      var left = ref.left;\n      var top = ref.top;\n      var width = ref.width;\n      var height = ref.height;\n      var isEffectiveCrop = left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width;\n      if (isEffectiveCrop) {\n        params.push(\"rect=\" + left + \",\" + top + \",\" + width + \",\" + height);\n      }\n    }\n    if (spec.bg) {\n      params.push(\"bg=\" + spec.bg);\n    }\n    if (spec.focalPoint) {\n      params.push(\"fp-x=\" + spec.focalPoint.x);\n      params.push(\"fp-y=\" + spec.focalPoint.y);\n    }\n    var flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('');\n    if (flip) {\n      params.push(\"flip=\" + flip);\n    } // Map from spec name to url param name, and allow using the actual param name as an alternative\n\n    SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function (mapping) {\n      var specName = mapping[0];\n      var param = mapping[1];\n      if (typeof spec[specName] !== 'undefined') {\n        params.push(param + \"=\" + encodeURIComponent(spec[specName]));\n      } else if (typeof spec[param] !== 'undefined') {\n        params.push(param + \"=\" + encodeURIComponent(spec[param]));\n      }\n    });\n    if (params.length === 0) {\n      return baseUrl;\n    }\n    return baseUrl + \"?\" + params.join('&');\n  }\n  function fit(source, spec) {\n    var cropRect;\n    var imgWidth = spec.width;\n    var imgHeight = spec.height; // If we are not constraining the aspect ratio, we'll just use the whole crop\n\n    if (!(imgWidth && imgHeight)) {\n      return {\n        width: imgWidth,\n        height: imgHeight,\n        rect: source.crop\n      };\n    }\n    var crop = source.crop;\n    var hotspot = source.hotspot; // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n\n    var desiredAspectRatio = imgWidth / imgHeight;\n    var cropAspectRatio = crop.width / crop.height;\n    if (cropAspectRatio > desiredAspectRatio) {\n      // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n      var height = Math.round(crop.height);\n      var width = Math.round(height * desiredAspectRatio);\n      var top = Math.max(0, Math.round(crop.top)); // Center output horizontally over hotspot\n\n      var hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left);\n      var left = Math.max(0, Math.round(hotspotXCenter - width / 2)); // Keep output within crop\n\n      if (left < crop.left) {\n        left = crop.left;\n      } else if (left + width > crop.left + crop.width) {\n        left = crop.left + crop.width - width;\n      }\n      cropRect = {\n        left: left,\n        top: top,\n        width: width,\n        height: height\n      };\n    } else {\n      // The crop is taller than the desired ratio, we are cutting from top and bottom\n      var width$1 = crop.width;\n      var height$1 = Math.round(width$1 / desiredAspectRatio);\n      var left$1 = Math.max(0, Math.round(crop.left)); // Center output vertically over hotspot\n\n      var hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top);\n      var top$1 = Math.max(0, Math.round(hotspotYCenter - height$1 / 2)); // Keep output rect within crop\n\n      if (top$1 < crop.top) {\n        top$1 = crop.top;\n      } else if (top$1 + height$1 > crop.top + crop.height) {\n        top$1 = crop.top + crop.height - height$1;\n      }\n      cropRect = {\n        left: left$1,\n        top: top$1,\n        width: width$1,\n        height: height$1\n      };\n    }\n    return {\n      width: imgWidth,\n      height: imgHeight,\n      rect: cropRect\n    };\n  } // For backwards-compatibility\n\n  var validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min'];\n  var validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy'];\n  var validAutoModes = ['format'];\n  function isSanityClientLike(client) {\n    return client ? typeof client.clientConfig === 'object' : false;\n  }\n  function rewriteSpecName(key) {\n    var specs = SPEC_NAME_TO_URL_NAME_MAPPINGS;\n    for (var i = 0, list = specs; i < list.length; i += 1) {\n      var entry = list[i];\n      var specName = entry[0];\n      var param = entry[1];\n      if (key === specName || key === param) {\n        return specName;\n      }\n    }\n    return key;\n  }\n  function urlBuilder(options) {\n    // Did we get a SanityClient?\n    var client = options;\n    if (isSanityClientLike(client)) {\n      // Inherit config from client\n      var ref = client.clientConfig;\n      var apiUrl = ref.apiHost;\n      var projectId = ref.projectId;\n      var dataset = ref.dataset;\n      var apiHost = apiUrl || 'https://api.sanity.io';\n      return new ImageUrlBuilder(null, {\n        baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n        projectId: projectId,\n        dataset: dataset\n      });\n    } // Or just accept the options as given\n\n    return new ImageUrlBuilder(null, options);\n  }\n  var ImageUrlBuilder = function ImageUrlBuilder(parent, options) {\n    this.options = parent ? Object.assign({}, parent.options || {}, options || {}) // Merge parent options\n    : Object.assign({}, options || {}); // Copy options\n  };\n\n  ImageUrlBuilder.prototype.withOptions = function withOptions(options) {\n    var baseUrl = options.baseUrl || this.options.baseUrl;\n    var newOptions = {\n      baseUrl: baseUrl\n    };\n    for (var key in options) {\n      if (options.hasOwnProperty(key)) {\n        var specKey = rewriteSpecName(key);\n        newOptions[specKey] = options[key];\n      }\n    }\n    return new ImageUrlBuilder(this, Object.assign({}, {\n      baseUrl: baseUrl\n    }, newOptions));\n  }; // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n\n  ImageUrlBuilder.prototype.image = function image(source) {\n    return this.withOptions({\n      source: source\n    });\n  }; // Specify the dataset\n\n  ImageUrlBuilder.prototype.dataset = function dataset(dataset$1) {\n    return this.withOptions({\n      dataset: dataset$1\n    });\n  }; // Specify the projectId\n\n  ImageUrlBuilder.prototype.projectId = function projectId(projectId$1) {\n    return this.withOptions({\n      projectId: projectId$1\n    });\n  }; // Specify background color\n\n  ImageUrlBuilder.prototype.bg = function bg(bg$1) {\n    return this.withOptions({\n      bg: bg$1\n    });\n  }; // Set DPR scaling factor\n\n  ImageUrlBuilder.prototype.dpr = function dpr(dpr$1) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr$1 && dpr$1 !== 1 ? {\n      dpr: dpr$1\n    } : {});\n  }; // Specify the width of the image in pixels\n\n  ImageUrlBuilder.prototype.width = function width(width$1) {\n    return this.withOptions({\n      width: width$1\n    });\n  }; // Specify the height of the image in pixels\n\n  ImageUrlBuilder.prototype.height = function height(height$1) {\n    return this.withOptions({\n      height: height$1\n    });\n  }; // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n\n  ImageUrlBuilder.prototype.focalPoint = function focalPoint(x, y) {\n    return this.withOptions({\n      focalPoint: {\n        x: x,\n        y: y\n      }\n    });\n  };\n  ImageUrlBuilder.prototype.maxWidth = function maxWidth(maxWidth$1) {\n    return this.withOptions({\n      maxWidth: maxWidth$1\n    });\n  };\n  ImageUrlBuilder.prototype.minWidth = function minWidth(minWidth$1) {\n    return this.withOptions({\n      minWidth: minWidth$1\n    });\n  };\n  ImageUrlBuilder.prototype.maxHeight = function maxHeight(maxHeight$1) {\n    return this.withOptions({\n      maxHeight: maxHeight$1\n    });\n  };\n  ImageUrlBuilder.prototype.minHeight = function minHeight(minHeight$1) {\n    return this.withOptions({\n      minHeight: minHeight$1\n    });\n  }; // Specify width and height in pixels\n\n  ImageUrlBuilder.prototype.size = function size(width, height) {\n    return this.withOptions({\n      width: width,\n      height: height\n    });\n  }; // Specify blur between 0 and 100\n\n  ImageUrlBuilder.prototype.blur = function blur(blur$1) {\n    return this.withOptions({\n      blur: blur$1\n    });\n  };\n  ImageUrlBuilder.prototype.sharpen = function sharpen(sharpen$1) {\n    return this.withOptions({\n      sharpen: sharpen$1\n    });\n  }; // Specify the desired rectangle of the image\n\n  ImageUrlBuilder.prototype.rect = function rect(left, top, width, height) {\n    return this.withOptions({\n      rect: {\n        left: left,\n        top: top,\n        width: width,\n        height: height\n      }\n    });\n  }; // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n\n  ImageUrlBuilder.prototype.format = function format(format$1) {\n    return this.withOptions({\n      format: format$1\n    });\n  };\n  ImageUrlBuilder.prototype.invert = function invert(invert$1) {\n    return this.withOptions({\n      invert: invert$1\n    });\n  }; // Rotation in degrees 0, 90, 180, 270\n\n  ImageUrlBuilder.prototype.orientation = function orientation(orientation$1) {\n    return this.withOptions({\n      orientation: orientation$1\n    });\n  }; // Compression quality 0-100\n\n  ImageUrlBuilder.prototype.quality = function quality(quality$1) {\n    return this.withOptions({\n      quality: quality$1\n    });\n  }; // Make it a download link. Parameter is default filename.\n\n  ImageUrlBuilder.prototype.forceDownload = function forceDownload(download) {\n    return this.withOptions({\n      download: download\n    });\n  }; // Flip image horizontally\n\n  ImageUrlBuilder.prototype.flipHorizontal = function flipHorizontal() {\n    return this.withOptions({\n      flipHorizontal: true\n    });\n  }; // Flip image vertically\n\n  ImageUrlBuilder.prototype.flipVertical = function flipVertical() {\n    return this.withOptions({\n      flipVertical: true\n    });\n  }; // Ignore crop/hotspot from image record, even when present\n\n  ImageUrlBuilder.prototype.ignoreImageParams = function ignoreImageParams() {\n    return this.withOptions({\n      ignoreImageParams: true\n    });\n  };\n  ImageUrlBuilder.prototype.fit = function fit(value) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(\"Invalid fit mode \\\"\" + value + \"\\\"\");\n    }\n    return this.withOptions({\n      fit: value\n    });\n  };\n  ImageUrlBuilder.prototype.crop = function crop(value) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(\"Invalid crop mode \\\"\" + value + \"\\\"\");\n    }\n    return this.withOptions({\n      crop: value\n    });\n  }; // Saturation\n\n  ImageUrlBuilder.prototype.saturation = function saturation(saturation$1) {\n    return this.withOptions({\n      saturation: saturation$1\n    });\n  };\n  ImageUrlBuilder.prototype.auto = function auto(value) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(\"Invalid auto mode \\\"\" + value + \"\\\"\");\n    }\n    return this.withOptions({\n      auto: value\n    });\n  }; // Specify the number of pixels to pad the image\n\n  ImageUrlBuilder.prototype.pad = function pad(pad$1) {\n    return this.withOptions({\n      pad: pad$1\n    });\n  }; // Gets the url based on the submitted parameters\n\n  ImageUrlBuilder.prototype.url = function url() {\n    return urlForImage(this.options);\n  }; // Alias for url()\n\n  ImageUrlBuilder.prototype.toString = function toString() {\n    return this.url();\n  };\n  return urlBuilder;\n});","map":{"version":3,"mappings":"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","names":["const","example","parseAssetId","ref","split","id","dimensionString","format","Error","imgWidthStr","imgHeightStr","width","height","isValidAssetId","isFinite","isRef","src","source","_ref","isAsset","_id","isAssetStub","asset","url","parseSource","image","isUrl","urlToId","img","crop","hotspot","applyDefaults","test","parts","slice","replace","result","Object","left","top","bottom","right","x","y","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","options","spec","JSON","stringify","cropLeft","Math","round","cropTop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","rect","focalPoint","ignoreImageParams","fit","specToImageUrl","cdnUrl","baseUrl","filename","projectId","dataset","params","isEffectiveCrop","push","bg","flip","flipHorizontal","flipVertical","filter","Boolean","join","forEach","mapping","specName","param","encodeURIComponent","length","cropRect","imgWidth","imgHeight","desiredAspectRatio","cropAspectRatio","max","hotspotXCenter","hotspotYCenter","validFits","validCrops","validAutoModes","isSanityClientLike","client","clientConfig","rewriteSpecName","key","specs","entry","urlBuilder","apiUrl","apiHost","ImageUrlBuilder","constructor","parent","withOptions","newOptions","hasOwnProperty","specKey","dpr","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","value","indexOf","saturation","auto","pad","toString"],"sources":["C:\\Users\\Sampah\\Desktop\\project\\try\\DIDASHARE\\dida_frontend\\node_modules\\@sanity\\image-url\\src\\parseAssetId.ts","C:\\Users\\Sampah\\Desktop\\project\\try\\DIDASHARE\\dida_frontend\\node_modules\\@sanity\\image-url\\src\\parseSource.ts","C:\\Users\\Sampah\\Desktop\\project\\try\\DIDASHARE\\dida_frontend\\node_modules\\@sanity\\image-url\\src\\urlForImage.ts","C:\\Users\\Sampah\\Desktop\\project\\try\\DIDASHARE\\dida_frontend\\node_modules\\@sanity\\image-url\\src\\builder.ts"],"sourcesContent":["const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n  ['pad', 'pad'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions): string {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    throw new Error(`Unable to resolve image URL from source (${JSON.stringify(source)})`)\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = Math.round(crop.height)\n    const width = Math.round(height * desiredAspectRatio)\n    const top = Math.max(0, Math.round(crop.top))\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left)\n    let left = Math.max(0, Math.round(hotspotXCenter - width / 2))\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {left, top, width, height}\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = Math.round(width / desiredAspectRatio)\n    const left = Math.max(0, Math.round(crop.left))\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top)\n    let top = Math.max(0, Math.round(hotspotYCenter - height / 2))\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {left, top, width, height}\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClientLike,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClientLike(client?: SanityClientLike): client is SanityClientLike {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClientLike | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClientLike\n  if (isSanityClientLike(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    // A DPR of 1 is the default - so only include it if we have a different value\n    return this.withOptions(dpr && dpr !== 1 ? {dpr} : {})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image vertically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Specify the number of pixels to pad the image\n  pad(pad: number) {\n    return this.withOptions({pad})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}