{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar isFunction_1 = require(\"./util/isFunction\");\nvar Observer_1 = require(\"./Observer\");\nvar Subscription_1 = require(\"./Subscription\");\nvar rxSubscriber_1 = require(\"../internal/symbol/rxSubscriber\");\nvar config_1 = require(\"./config\");\nvar hostReportError_1 = require(\"./util/hostReportError\");\nvar Subscriber = function (_super) {\n  __extends(Subscriber, _super);\n  function Subscriber(destinationOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n    _this.syncErrorValue = null;\n    _this.syncErrorThrown = false;\n    _this.syncErrorThrowable = false;\n    _this.isStopped = false;\n    switch (arguments.length) {\n      case 0:\n        _this.destination = Observer_1.empty;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          _this.destination = Observer_1.empty;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            _this.destination = destinationOrNext;\n            destinationOrNext.add(_this);\n          } else {\n            _this.syncErrorThrowable = true;\n            _this.destination = new SafeSubscriber(_this, destinationOrNext);\n          }\n          break;\n        }\n      default:\n        _this.syncErrorThrowable = true;\n        _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n        break;\n    }\n    return _this;\n  }\n  Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () {\n    return this;\n  };\n  Subscriber.create = function (next, error, complete) {\n    var subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  };\n  Subscriber.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  };\n  Subscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  };\n  Subscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  };\n  Subscriber.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    _super.prototype.unsubscribe.call(this);\n  };\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n  Subscriber.prototype._error = function (err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n  Subscriber.prototype._complete = function () {\n    this.destination.complete();\n    this.unsubscribe();\n  };\n  Subscriber.prototype._unsubscribeAndRecycle = function () {\n    var _parentOrParents = this._parentOrParents;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  };\n  return Subscriber;\n}(Subscription_1.Subscription);\nexports.Subscriber = Subscriber;\nvar SafeSubscriber = function (_super) {\n  __extends(SafeSubscriber, _super);\n  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n    _this._parentSubscriber = _parentSubscriber;\n    var next;\n    var context = _this;\n    if (isFunction_1.isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n      if (observerOrNext !== Observer_1.empty) {\n        context = Object.create(observerOrNext);\n        if (isFunction_1.isFunction(context.unsubscribe)) {\n          _this.add(context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = _this.unsubscribe.bind(_this);\n      }\n    }\n    _this._context = context;\n    _this._next = next;\n    _this._error = error;\n    _this._complete = complete;\n    return _this;\n  }\n  SafeSubscriber.prototype.next = function (value) {\n    if (!this.isStopped && this._next) {\n      var _parentSubscriber = this._parentSubscriber;\n      if (!config_1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  };\n  SafeSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      var useDeprecatedSynchronousErrorHandling = config_1.config.useDeprecatedSynchronousErrorHandling;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError_1.hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError_1.hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  };\n  SafeSubscriber.prototype.complete = function () {\n    var _this = this;\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      if (this._complete) {\n        var wrappedComplete = function () {\n          return _this._complete.call(_this._context);\n        };\n        if (!config_1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  };\n  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config_1.config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError_1.hostReportError(err);\n      }\n    }\n  };\n  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n    if (!config_1.config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config_1.config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError_1.hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  };\n  SafeSubscriber.prototype._unsubscribe = function () {\n    var _parentSubscriber = this._parentSubscriber;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  };\n  return SafeSubscriber;\n}(Subscriber);\nexports.SafeSubscriber = SafeSubscriber;","map":{"version":3,"mappings":"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","names":["__extends","destinationOrNext","error","complete","_super","_this","arguments","length","destination","Observer_1","Subscriber","syncErrorThrowable","add","SafeSubscriber","rxSubscriber_1","next","subscriber","value","isStopped","_next","err","_error","_complete","closed","unsubscribe","_parentOrParents","Subscription_1","exports","_parentSubscriber","observerOrNext","context","isFunction_1","Object","create","bind","_context","config_1","useDeprecatedSynchronousErrorHandling","__tryOrUnsub","__tryOrSetError","hostReportError_1","syncErrorValue","syncErrorThrown","wrappedComplete","call","fn","parent","Error"],"sources":["C:\\Users\\Sampah\\Desktop\\project\\try\\DIDASHARE\\dida_frontend\\node_modules\\rxjs\\src\\internal\\Subscriber.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}