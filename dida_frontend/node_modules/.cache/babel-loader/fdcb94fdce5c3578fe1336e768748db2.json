{"ast":null,"code":"\"use strict\";\n\nvar makeError = require('make-error');\nvar assign = require('object-assign');\nfunction ClientError(res) {\n  var props = extractErrorProps(res);\n  ClientError.super.call(this, props.message);\n  assign(this, props);\n}\nfunction ServerError(res) {\n  var props = extractErrorProps(res);\n  ServerError.super.call(this, props.message);\n  assign(this, props);\n}\nfunction extractErrorProps(res) {\n  var body = res.body;\n  var props = {\n    response: res,\n    statusCode: res.statusCode,\n    responseBody: stringifyBody(body, res)\n  }; // API/Boom style errors ({statusCode, error, message})\n\n  if (body.error && body.message) {\n    props.message = \"\".concat(body.error, \" - \").concat(body.message);\n    return props;\n  } // Query/database errors ({error: {description, other, arb, props}})\n\n  if (body.error && body.error.description) {\n    props.message = body.error.description;\n    props.details = body.error;\n    return props;\n  } // Other, more arbitrary errors\n\n  props.message = body.error || body.message || httpErrorMessage(res);\n  return props;\n}\nfunction httpErrorMessage(res) {\n  var statusMessage = res.statusMessage ? \" \".concat(res.statusMessage) : '';\n  return \"\".concat(res.method, \"-request to \").concat(res.url, \" resulted in HTTP \").concat(res.statusCode).concat(statusMessage);\n}\nfunction stringifyBody(body, res) {\n  var contentType = (res.headers['content-type'] || '').toLowerCase();\n  var isJson = contentType.indexOf('application/json') !== -1;\n  return isJson ? JSON.stringify(body, null, 2) : body;\n}\nmakeError(ClientError);\nmakeError(ServerError);\nexports.ClientError = ClientError;\nexports.ServerError = ServerError;","map":{"version":3,"names":["makeError","require","assign","ClientError","res","props","extractErrorProps","super","call","message","ServerError","body","response","statusCode","responseBody","stringifyBody","error","concat","description","details","httpErrorMessage","statusMessage","method","url","contentType","headers","toLowerCase","isJson","indexOf","JSON","stringify","exports"],"sources":["C:/Users/Sampah/Desktop/project/try/DIDASHARE/dida_frontend/node_modules/@sanity/client/lib/http/errors.js"],"sourcesContent":["\"use strict\";\n\nvar makeError = require('make-error');\n\nvar assign = require('object-assign');\n\nfunction ClientError(res) {\n  var props = extractErrorProps(res);\n  ClientError.super.call(this, props.message);\n  assign(this, props);\n}\n\nfunction ServerError(res) {\n  var props = extractErrorProps(res);\n  ServerError.super.call(this, props.message);\n  assign(this, props);\n}\n\nfunction extractErrorProps(res) {\n  var body = res.body;\n  var props = {\n    response: res,\n    statusCode: res.statusCode,\n    responseBody: stringifyBody(body, res)\n  }; // API/Boom style errors ({statusCode, error, message})\n\n  if (body.error && body.message) {\n    props.message = \"\".concat(body.error, \" - \").concat(body.message);\n    return props;\n  } // Query/database errors ({error: {description, other, arb, props}})\n\n\n  if (body.error && body.error.description) {\n    props.message = body.error.description;\n    props.details = body.error;\n    return props;\n  } // Other, more arbitrary errors\n\n\n  props.message = body.error || body.message || httpErrorMessage(res);\n  return props;\n}\n\nfunction httpErrorMessage(res) {\n  var statusMessage = res.statusMessage ? \" \".concat(res.statusMessage) : '';\n  return \"\".concat(res.method, \"-request to \").concat(res.url, \" resulted in HTTP \").concat(res.statusCode).concat(statusMessage);\n}\n\nfunction stringifyBody(body, res) {\n  var contentType = (res.headers['content-type'] || '').toLowerCase();\n  var isJson = contentType.indexOf('application/json') !== -1;\n  return isJson ? JSON.stringify(body, null, 2) : body;\n}\n\nmakeError(ClientError);\nmakeError(ServerError);\nexports.ClientError = ClientError;\nexports.ServerError = ServerError;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AAErC,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAe,CAAC;AAErC,SAASE,WAAW,CAACC,GAAG,EAAE;EACxB,IAAIC,KAAK,GAAGC,iBAAiB,CAACF,GAAG,CAAC;EAClCD,WAAW,CAACI,KAAK,CAACC,IAAI,CAAC,IAAI,EAAEH,KAAK,CAACI,OAAO,CAAC;EAC3CP,MAAM,CAAC,IAAI,EAAEG,KAAK,CAAC;AACrB;AAEA,SAASK,WAAW,CAACN,GAAG,EAAE;EACxB,IAAIC,KAAK,GAAGC,iBAAiB,CAACF,GAAG,CAAC;EAClCM,WAAW,CAACH,KAAK,CAACC,IAAI,CAAC,IAAI,EAAEH,KAAK,CAACI,OAAO,CAAC;EAC3CP,MAAM,CAAC,IAAI,EAAEG,KAAK,CAAC;AACrB;AAEA,SAASC,iBAAiB,CAACF,GAAG,EAAE;EAC9B,IAAIO,IAAI,GAAGP,GAAG,CAACO,IAAI;EACnB,IAAIN,KAAK,GAAG;IACVO,QAAQ,EAAER,GAAG;IACbS,UAAU,EAAET,GAAG,CAACS,UAAU;IAC1BC,YAAY,EAAEC,aAAa,CAACJ,IAAI,EAAEP,GAAG;EACvC,CAAC,CAAC,CAAC;;EAEH,IAAIO,IAAI,CAACK,KAAK,IAAIL,IAAI,CAACF,OAAO,EAAE;IAC9BJ,KAAK,CAACI,OAAO,GAAG,EAAE,CAACQ,MAAM,CAACN,IAAI,CAACK,KAAK,EAAE,KAAK,CAAC,CAACC,MAAM,CAACN,IAAI,CAACF,OAAO,CAAC;IACjE,OAAOJ,KAAK;EACd,CAAC,CAAC;;EAGF,IAAIM,IAAI,CAACK,KAAK,IAAIL,IAAI,CAACK,KAAK,CAACE,WAAW,EAAE;IACxCb,KAAK,CAACI,OAAO,GAAGE,IAAI,CAACK,KAAK,CAACE,WAAW;IACtCb,KAAK,CAACc,OAAO,GAAGR,IAAI,CAACK,KAAK;IAC1B,OAAOX,KAAK;EACd,CAAC,CAAC;;EAGFA,KAAK,CAACI,OAAO,GAAGE,IAAI,CAACK,KAAK,IAAIL,IAAI,CAACF,OAAO,IAAIW,gBAAgB,CAAChB,GAAG,CAAC;EACnE,OAAOC,KAAK;AACd;AAEA,SAASe,gBAAgB,CAAChB,GAAG,EAAE;EAC7B,IAAIiB,aAAa,GAAGjB,GAAG,CAACiB,aAAa,GAAG,GAAG,CAACJ,MAAM,CAACb,GAAG,CAACiB,aAAa,CAAC,GAAG,EAAE;EAC1E,OAAO,EAAE,CAACJ,MAAM,CAACb,GAAG,CAACkB,MAAM,EAAE,cAAc,CAAC,CAACL,MAAM,CAACb,GAAG,CAACmB,GAAG,EAAE,oBAAoB,CAAC,CAACN,MAAM,CAACb,GAAG,CAACS,UAAU,CAAC,CAACI,MAAM,CAACI,aAAa,CAAC;AACjI;AAEA,SAASN,aAAa,CAACJ,IAAI,EAAEP,GAAG,EAAE;EAChC,IAAIoB,WAAW,GAAG,CAACpB,GAAG,CAACqB,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,EAAEC,WAAW,EAAE;EACnE,IAAIC,MAAM,GAAGH,WAAW,CAACI,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;EAC3D,OAAOD,MAAM,GAAGE,IAAI,CAACC,SAAS,CAACnB,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAAGA,IAAI;AACtD;AAEAX,SAAS,CAACG,WAAW,CAAC;AACtBH,SAAS,CAACU,WAAW,CAAC;AACtBqB,OAAO,CAAC5B,WAAW,GAAGA,WAAW;AACjC4B,OAAO,CAACrB,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script"}