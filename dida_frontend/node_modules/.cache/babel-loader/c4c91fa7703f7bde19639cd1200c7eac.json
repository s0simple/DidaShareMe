{"ast":null,"code":"\"use strict\";\n\n//  Since `@sanity/client` doesn't offer ESM exports (yet) const {filter} = require('rxjs/operators') will cause the the whole of rxjs to be included in the bundle.\n//  The internal import paths here is a stop-gap measure and will become less of a problem when @sanity/client export tree-shakeable esm bundles\nvar _require = require('rxjs/internal/Observable'),\n  Observable = _require.Observable;\nvar _require2 = require('rxjs/internal/operators/filter'),\n  filter = _require2.filter;\nvar _require3 = require('rxjs/internal/operators/map'),\n  map = _require3.map;\nmodule.exports = {\n  Observable: Observable,\n  filter: filter,\n  map: map\n};","map":{"version":3,"names":["_require","require","Observable","_require2","filter","_require3","map","module","exports"],"sources":["C:/Users/Sampah/Desktop/project/try/DIDASHARE/dida_frontend/node_modules/@sanity/client/lib/util/observable.js"],"sourcesContent":["\"use strict\";\n\n//  Since `@sanity/client` doesn't offer ESM exports (yet) const {filter} = require('rxjs/operators') will cause the the whole of rxjs to be included in the bundle.\n//  The internal import paths here is a stop-gap measure and will become less of a problem when @sanity/client export tree-shakeable esm bundles\nvar _require = require('rxjs/internal/Observable'),\n    Observable = _require.Observable;\n\nvar _require2 = require('rxjs/internal/operators/filter'),\n    filter = _require2.filter;\n\nvar _require3 = require('rxjs/internal/operators/map'),\n    map = _require3.map;\n\nmodule.exports = {\n  Observable: Observable,\n  filter: filter,\n  map: map\n};"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,0BAA0B,CAAC;EAC9CC,UAAU,GAAGF,QAAQ,CAACE,UAAU;AAEpC,IAAIC,SAAS,GAAGF,OAAO,CAAC,gCAAgC,CAAC;EACrDG,MAAM,GAAGD,SAAS,CAACC,MAAM;AAE7B,IAAIC,SAAS,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;EAClDK,GAAG,GAAGD,SAAS,CAACC,GAAG;AAEvBC,MAAM,CAACC,OAAO,GAAG;EACfN,UAAU,EAAEA,UAAU;EACtBE,MAAM,EAAEA,MAAM;EACdE,GAAG,EAAEA;AACP,CAAC"},"metadata":{},"sourceType":"script"}