{"ast":null,"code":"\"use strict\";\n\nvar objectAssign = require('object-assign');\nmodule.exports = function (opts) {\n  return {\n    onResponse: function onResponse(response) {\n      var contentType = response.headers['content-type'] || '';\n      var shouldDecode = opts && opts.force || contentType.indexOf('application/json') !== -1;\n      if (!response.body || !contentType || !shouldDecode) {\n        return response;\n      }\n      return objectAssign({}, response, {\n        body: tryParse(response.body)\n      });\n    },\n    processOptions: function processOptions(options) {\n      return objectAssign({}, options, {\n        headers: objectAssign({\n          Accept: 'application/json'\n        }, options.headers)\n      });\n    }\n  };\n};\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body);\n  } catch (err) {\n    err.message = \"Failed to parsed response body as JSON: \".concat(err.message);\n    throw err;\n  }\n}","map":{"version":3,"mappings":";;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA5B;AAEAC,MAAM,CAACC,OAAP,GAAiB,cAAI;EAAA,OAAK;IACxBC,UAAU,EAAE,4BAAQ,EAAI;MACtB,IAAMC,WAAW,GAAGC,QAAQ,CAACC,OAAT,CAAiB,cAAjB,KAAoC,EAAxD;MACA,IAAMC,YAAY,GAAIC,IAAI,IAAIA,IAAI,CAACC,KAAd,IAAwBL,WAAW,CAACM,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAA1F;MACA,IAAI,CAACL,QAAQ,CAACM,IAAV,IAAkB,CAACP,WAAnB,IAAkC,CAACG,YAAvC,EAAqD;QACnD,OAAOF,QAAP;MACD;MAED,OAAON,YAAY,CAAC,EAAD,EAAKM,QAAL,EAAe;QAACM,IAAI,EAAEC,QAAQ,CAACP,QAAQ,CAACM,IAAV;MAAf,CAAf,CAAnB;IACD,CATuB;IAWxBE,cAAc,EAAE,+BAAO;MAAA,OACrBd,YAAY,CAAC,EAAD,EAAKe,OAAL,EAAc;QACxBR,OAAO,EAAEP,YAAY,CAAC;UAACgB,MAAM,EAAE;QAAT,CAAD,EAA+BD,OAAO,CAACR,OAAvC;MADG,CAAd,CADS;IAAA;EAXC,CAAL;AAAA,CAArB;AAiBA,SAASM,QAAT,CAAkBD,IAAlB,EAAwB;EACtB,IAAI;IACF,OAAOK,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAP;EACD,CAFD,CAEE,OAAOO,GAAP,EAAY;IACZA,GAAG,CAACC,OAAJ,qDAAyDD,GAAG,CAACC,OAA7D;IACA,MAAMD,GAAN;EACD;AACF","names":["objectAssign","require","module","exports","onResponse","contentType","response","headers","shouldDecode","opts","force","indexOf","body","tryParse","processOptions","options","Accept","JSON","parse","err","message"],"sources":["C:\\Users\\Sampah\\Desktop\\project\\try\\DIDASHARE\\dida_frontend\\node_modules\\get-it\\src\\middleware\\jsonResponse.js"],"sourcesContent":["const objectAssign = require('object-assign')\n\nmodule.exports = opts => ({\n  onResponse: response => {\n    const contentType = response.headers['content-type'] || ''\n    const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n    if (!response.body || !contentType || !shouldDecode) {\n      return response\n    }\n\n    return objectAssign({}, response, {body: tryParse(response.body)})\n  },\n\n  processOptions: options =>\n    objectAssign({}, options, {\n      headers: objectAssign({Accept: 'application/json'}, options.headers)\n    })\n})\n\nfunction tryParse(body) {\n  try {\n    return JSON.parse(body)\n  } catch (err) {\n    err.message = `Failed to parsed response body as JSON: ${err.message}`\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"script"}